BASE_ITEM_RATINGS = {
    10 => [:EVIOLITE, :FOCUSSASH, :LIFEORB, :THICKCLUB],
    9  => [:ASSAULTVEST, :BLACKSLUDGE, :CHOICEBAND, :CHOICESCARF, :CHOICESPECS,
           :DEEPSEATOOTH, :LEFTOVERS, :GOLDTEETH],
    8  => [:LEEK, :STICK, :THROATSPRAY, :WEAKNESSPOLICY],
    7  => [:EXPERTBELT, :LIGHTBALL, :LUMBERRY, :POWERHERB, :ROCKYHELMET,
           :SITRUSBERRY],
    6  => [:KINGSROCK, :LIECHIBERRY, :LIGHTCLAY, :PETAYABERRY, :RAZORFANG,
           :REDCARD, :SALACBERRY, :SHELLBELL, :WHITEHERB,
           # Type-resisting berries
           :BABIRIBERRY, :CHARTIBERRY, :CHILANBERRY, :CHOPLEBERRY, :COBABERRY,
           :COLBURBERRY, :HABANBERRY, :KASIBBERRY, :KEBIABERRY, :OCCABERRY,
           :PASSHOBERRY, :PAYAPABERRY, :RINDOBERRY, :ROSELIBERRY, :SHUCABERRY,
           :TANGABERRY, :WACANBERRY, :YACHEBERRY,
           # Gems
           :BUGGEM, :DARKGEM, :DRAGONGEM, :ELECTRICGEM, :FAIRYGEM, :FIGHTINGGEM,
           :FIREGEM, :FLYINGGEM, :GHOSTGEM, :GRASSGEM, :GROUNDGEM, :ICEGEM,
           :NORMALGEM, :POISONGEM, :PSYCHICGEM, :ROCKGEM, :STEELGEM, :WATERGEM,
           # Legendary Orbs
           :ADAMANTORB, :GRISEOUSORB, :LUSTROUSORB, :SOULDEW,
           # Berries that heal HP and may confuse
           :AGUAVBERRY, :FIGYBERRY, :IAPAPABERRY, :MAGOBERRY, :WIKIBERRY],
    5  =>  [:CUSTAPBERRY, :DEEPSEASCALE, :EJECTBUTTON, :FOCUSBAND, :JABOCABERRY,
           :KEEBERRY, :LANSATBERRY, :MARANGABERRY, :MENTALHERB, :METRONOME,
           :MUSCLEBAND, :QUICKCLAW, :RAZORCLAW, :ROWAPBERRY, :SCOPELENS,
           :WISEGLASSES,
           # Type power boosters
           :BLACKBELT, :BLACKGLASSES, :CHARCOAL, :DRAGONFANG, :HARDSTONE,
           :MAGNET, :METALCOAT, :MIRACLESEED, :MYSTICWATER, :NEVERMELTICE,
           :POISONBARB, :SHARPBEAK, :SILKSCARF, :SILVERPOWDER, :SOFTSAND,
           :SPELLTAG, :TWISTEDSPOON,
           :ODDINCENSE, :ROCKINCENSE, :ROSEINCENSE, :SEAINCENSE, :WAVEINCENSE,
           :BEACHGLASS, :CHALKYSTONE, :GOLDLEAF, :PEARLSTRING, :POLISHEDMUDBALL, :SILVERLEAF,
           :SMALLBOUQUET, :STRETCHYSTRING, :TROPICALSHELL,
           # Plates
           :DRACOPLATE, :DREADPLATE, :EARTHPLATE, :FISTPLATE, :FLAMEPLATE,
           :ICICLEPLATE, :INSECTPLATE, :IRONPLATE, :MEADOWPLATE, :MINDPLATE,
           :PIXIEPLATE, :SKYPLATE, :SPLASHPLATE, :SPOOKYPLATE, :STONEPLATE,
           :TOXICPLATE, :ZAPPLATE,
           # Weather/terrain extenders
           :DAMPROCK, :HEATROCK, :ICYROCK, :SMOOTHROCK, :TERRAINEXTENDER],
    4  => [:ADRENALINEORB, :APICOTBERRY, :BLUNDERPOLICY, :CHESTOBERRY,
           :EJECTPACK, :ENIGMABERRY, :GANLONBERRY, :HEAVYDUTYBOOTS,
           :ROOMSERVICE, :SAFETYGOGGLES, :SHEDSHELL, :STARFBERRY],
    3  => [:BIGROOT, :BRIGHTPOWDER, :LAXINCENSE, :LEPPABERRY, :PERSIMBERRY,
           :PROTECTIVEPADS, :UTILITYUMBRELLA,
           # Status problem-curing berries (except Chesto which is in 4)
           :ASPEARBERRY, :CHERIBERRY, :PECHABERRY, :RAWSTBERRY],
    2  => [:ABSORBBULB, :BERRYJUICE, :CELLBATTERY, :GRIPCLAW, :LUMINOUSMOSS,
           :MICLEBERRY, :ORANBERRY, :SNOWBALL, :WIDELENS, :ZOOMLENS,
           # Terrain seeds
           :ELECTRICSEED, :GRASSYSEED, :MISTYSEED, :PSYCHICSEED],
    1  => [:AIRBALLOON, :BINDINGBAND, :DESTINYKNOT, :FLOATSTONE, :LUCKYPUNCH,
           :METALPOWDER, :QUICKPOWDER,
           # Drives
           :BURNDRIVE, :CHILLDRIVE, :DOUSEDRIVE, :SHOCKDRIVE,
           # Memories
           :BUGMEMORY, :DARKMEMORY, :DRAGONMEMORY, :ELECTRICMEMORY,
           :FAIRYMEMORY, :FIGHTINGMEMORY, :FIREMEMORY, :FLYINGMEMORY,
           :GHOSTMEMORY, :GRASSMEMORY, :GROUNDMEMORY, :ICEMEMORY, :POISONMEMORY,
           :PSYCHICMEMORY, :ROCKMEMORY, :STEELMEMORY, :WATERMEMORY],
    0  => [:SMOKEBALL],
    -5 => [:FULLINCENSE, :LAGGINGTAIL, :RINGTARGET],
    -6 => [:MACHOBRACE, :POWERANKLET, :POWERBAND, :POWERBELT, :POWERBRACER,
           :POWERLENS, :POWERWEIGHT, :SNOWORB],
    -7 => [:FLAMEORB, :IRONBALL, :TOXICORB],
    -9 => [:STICKYBARB]
}

Battle::AI::Handlers::ItemRanking.add(:THUMBDRIVE,
  proc { |item, score, battler, ai|
    next score if (user.isSpecies?(:PORYGON) || user.isSpecies?(:PORYGON2) || user.isSpecies?(:PORYGONZ))
    next 0
  }
)

Battle::AI::Handlers::ItemRanking.addIf(:type_boosting_items,
  proc { |item|
    next [:BLACKBELT, :BLACKGLASSES, :CHARCOAL, :DRAGONFANG, :HARDSTONE,
          :MAGNET, :METALCOAT, :MIRACLESEED, :MYSTICWATER, :NEVERMELTICE,
          :POISONBARB, :SHARPBEAK, :SILKSCARF, :SILVERPOWDER, :SOFTSAND,
          :SPELLTAG, :TWISTEDSPOON,
          :DRACOPLATE, :DREADPLATE, :EARTHPLATE, :FISTPLATE, :FLAMEPLATE,
          :ICICLEPLATE, :INSECTPLATE, :IRONPLATE, :MEADOWPLATE, :MINDPLATE,
          :PIXIEPLATE, :SKYPLATE, :SPLASHPLATE, :SPOOKYPLATE, :STONEPLATE,
          :TOXICPLATE, :ZAPPLATE,
          :ODDINCENSE, :ROCKINCENSE, :ROSEINCENSE, :SEAINCENSE,
          :BEACHGLASS, :CHALKYSTONE, :GOLDLEAF, :POLISHEDMUDBALL, :SILVERLEAF,
          :SMALLBOUQUET, :STRETCHYSTRING, :TROPICALSHELL,].include?(item)
  },
  proc { |item, score, battler, ai|
    boosters = {
      :BUG      => [:SILVERPOWDER, :INSECTPLATE],
      :DARK     => [:BLACKGLASSES, :DREADPLATE],
      :DRAGON   => [:DRAGONFANG, :DRACOPLATE],
      :ELECTRIC => [:MAGNET, :ZAPPLATE],
      :FAIRY    => [:PIXIEPLATE, :SMALLBOUQUET],
      :FIGHTING => [:BLACKBELT, :FISTPLATE],
      :FIRE     => [:CHARCOAL, :FLAMEPLATE],
      :FLYING   => [:SHARPBEAK, :SKYPLATE],
      :GHOST    => [:SPELLTAG, :SPOOKYPLATE],
      :GRASS    => [:MIRACLESEED, :MEADOWPLATE, :ROSEINCENSE, :SILVERLEAF, :SMALLBOUQUET],
      :GROUND   => [:SOFTSAND, :EARTHPLATE, :POLISHEDMUDBALL],
      :ICE      => [:NEVERMELTICE, :ICICLEPLATE],
      :NORMAL   => [:SILKSCARF, :CHALKYSTONE, :SILVERLEAF, :STRETCHYSTRING, :GOLDLEAF],
      :POISON   => [:POISONBARB, :TOXICPLATE],
      :PSYCHIC  => [:TWISTEDSPOON, :MINDPLATE, :ODDINCENSE],
      :ROCK     => [:HARDSTONE, :STONEPLATE, :ROCKINCENSE, :CHALKYSTONE, :POLISHEDMUDBALL, :TROPICALSHELL],
      :STEEL    => [:METALCOAT, :IRONPLATE, :BEACHGLASS, :STRETCHYSTRING],
      :WATER    => [:MYSTICWATER, :SPLASHPLATE, :SEAINCENSE, :WAVEINCENSE, :BEACHGLASS, :TROPICALSHELL]
    }
    boosted_type = nil
    boosters.each_pair do |type, items|
      next if !items.include?(item)
      boosted_type = type
      break
    end
    next score if boosted_type && battler.has_damaging_move_of_type?(boosted_type)
    next 0
  }
)
